# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  name: 'agtwin'
 
variables:
- group: azure_build
- group: azure_subscription
- name: lbname
  value: api-prod-vmss-lb
- name: vmssrgname
  value: testvmss-rg
- name: system.debug
  value: false

resources:
  pipelines:
  - pipeline: build_artifact
    source: build-pipeline

stages:
- stage: QA
  jobs:
  - deployment: 'Deploy_to_QA'
    environment: 'QA'
    strategy:
     runOnce:
       deploy:
        steps:
        - powershell: "Write-Host BuildID: $(resources.pipeline.build_artifact.runID)"

- stage: Staging
  jobs:
  - deployment: 'Deploy_to_Prod_staging'
    environment: 'Stage'
    strategy:
     runOnce:
       deploy:
        steps:
        - task: AzureCLI@2
          displayName: 'Azure CLI - Deploy to stage slot'
          inputs:
            azureSubscription: 'MyAzure_Subscription'
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: |
              $m=(az network lb show -g $(vmssrgname) -n $(lbname) --query "tags.ActiveSlot" -o tsv)
              if ($m -eq "0") { $n="1" } else { $n="0" }
              az vmss update -g $(vmssrgname) -n "api-prod-vmss-slot$n" --set "virtualMachineProfile.storageProfile.imageReference.id=/subscriptions/$(subscription_id)/resourceGroups/$(rgname)/providers/Microsoft.Compute/images/app$(resources.pipeline.build_artifact.runID)"
- stage: SwapProd
  jobs:
  - deployment: 'Swap_to_Prod'
    environment: 'Prod'
    strategy:
     runOnce:
       deploy:
        steps:
        - task: AzureCLI@2
          displayName: 'Azure CLI - Deploy to stage slot'
          inputs:
            azureSubscription: 'MyAzure_Subscription'
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: |
              # vip swap
              $m=(az network lb show -g $(vmssrgname) -n $(lbname) --query "tags.ActiveSlot" -o tsv)
              if ($m -eq "0") { $n="1" } else { $n="0" }
              az network lb probe update -g $(vmssrgname) --lb-name $(lbname) -n http-probe --set "requestPath='/api/ping?slot=slot$n'"
              az network lb probe update -g $(vmssrgname) --lb-name $(lbname) -n http-probe-stage --set "requestPath='/api/ping?slot=slot$m'"
              az network lb update -g $(vmssrgname) -n $(lbname) --set "tags.ActiveSlot=$n"